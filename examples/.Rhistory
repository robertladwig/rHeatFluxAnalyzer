install.packages("FME")
install.packages("deSolve")
library(devtools)
rprofile_path = file.path(Sys.getenv("HOME"),
".Rprofile")
write(’\noptions(repos=c(getOption(\’repos\’),
CRAN=\’https://cloud.r-project.org\’,
USGS=\’https://owi.usgs.gov/R\’))\n’,
rprofile_path,
append = TRUE)
cat(’Your Rprofile has been updated to include GRAN.
Please restart R for changes to take effect.’)
install.packages("glmtools")
rprofile_path = file.path(Sys.getenv("HOME"),
".Rprofile")
write('\noptions(repos=c(getOption(\'repos\'),
CRAN=\'https://cloud.r-project.org\',
USGS=\'https://owi.usgs.gov/R\'))\n',
rprofile_path,
append = TRUE)
cat('Your Rprofile has been updated to include GRAN.
Please restart R for changes to take effect.')
install.packages("glmtools")
install.packages("glmtools")
library(GLMr)
glm_version()
glm_version()
library(GLMr)
?run_glm
?system
?system2
shiny::runApp('Documents/R/shiny/simple_1')
runApp('Documents/R/shiny/simple_1')
install.packages("RPostgreSQL")
require("RPostgreSQL")
install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"rasberryMSQL"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "pi",
host = "192.168.2.139", port = 5432,
user = "pi", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
# creates df, a data.frame with the necessary columns
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
rm(mtcars)
# writes df to the PostgreSQL database "postgres", table "cartable"
dbWriteTable(con, "cartable",
value = df, append = TRUE, row.names = FALSE)
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
df_postgres
# compares the two data.frames
identical(df, df_postgres)
# Basic Graph of the Data
require(ggplot2)
ggplot(df_postgres, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() + theme_bw()
install.packages("ggplot2")
# get info from db
dbGetInfo(con)
# list available tables
dbListTables(con)
# Basic Graph of the Data
require(ggplot2)
# Basic Graph of the Data
ggplot(df_postgres, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() + theme_bw()
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from einkaufslite")
df_postgres
# add entry to table
dbAppendTable(con,"einlkauslite",data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12")))
# add entry to table
dbAppendTable(con,"einkaufslite",data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12")))
data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12")
)
item2 <- df_postgres
item2$item <- "item 2"
item2$price <- 12.34
# add entry to table
dbAppendTable(con,"einkaufslite",item2)
# add entry to table
dbWriteTable(con,"einkaufslite",item2,append = TRUE)
item2
# add entry to table
dbWriteTable(con,"einkaufslite",data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12"),
row.names = FALSE),append = TRUE)
# add entry to table
dbWriteTable(con,"einkaufslite",data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12")),
row.names = FALSE,append = TRUE)
# list available tables
dbListTables(con)
# query the data from postgreSQL
dbGetQuery(con, "SELECT * from einkaufslite")
shiny::runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
today_ch <- as.POSIXct(date())
date()
today_ch <- as.POSIXct(date(),format="%a %b %d %H %Y")
today_ch
as.POSIXct(date(),format="%a %b %d %H %Y")
format(as.POSIXct("2019-02-03"),format="%a %b %d %H %Y")
today_ch <- as.POSIXct(date(),format="%a %b %d %T %Y")
today_ch
format(as.POSIXct("2019-02-03"),format="%a %b %d %T %Y")
format(as.POSIXct("2019-05-14"),format="%a %b %d %T %Y")
Sys.Date()
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"rasberryMSQL"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "pi",
host = "192.168.2.139", port = 5432,
user = "pi", password = pw)
rm(pw) # removes the password
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"rasberryMSQL"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "pi",
host = "192.168.2.138", port = 5432,
user = "pi", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# get info from db
dbGetInfo(con)
# list available tables
dbListTables(con)
# query the data from postgreSQL
dbGetQuery(con, "SELECT * from einkaufslite")
# close the connection
dbDisconnect(con)
dbUnloadDriver(drv)
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
setwd("~/Documents/Promotion/AEMONj/rLHFA/rLakeHeatFluxAnalyzer/R")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("pracma")
setwd("..")
library(roxygen2)
roxygenise()
setwd("..")
library(devtools)
install("rLakeHeatFluxAnalyzer/")
detach("package:rLakeHeatFluxAnalyzer", unload=TRUE)
library("rLakeHeatFluxAnalyzer", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
graphics.off()
rm(list = ls())
cat("\f")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
roxygenise()
setwd("..")
detach("package:rLakeHeatFluxAnalyzer", unload=TRUE)
install("rLakeHeatFluxAnalyzer/")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(dygraphs)
library(rLakeHeatFluxAnalyzer)
graphics.off()
rm(list = ls())
cat("\f")
rm(list=ls())
# read in example data
airT <- read.delim("../data/Esthwaite.airT")
rh <- read.delim("../data/Esthwaite.rh")
sw <- read.delim("../data/Esthwaite.sw")
wnd <- read.delim("../data/Esthwaite.wnd")
wtr <- read.delim("../data/Esthwaite.wtr")
# set latitude
lat <- 54
# combine data in a data.frame
dat <- data.frame(airT,RH=rh$RH,sw=sw$sw,wnd=wnd$wnd,W_temp=wtr$temp1)
# convert time to POSIXct format
dat$dateTime <- as.POSIXct(dat$dateTime,tz="UTC")
# test sw_alb
alb <- sw_alb(time = dat$dateTime,lat = 54)
detach("package:rLakeHeatFluxAnalyzer", unload=TRUE)
setwd("..")
roxygenise()
setwd("..")
install("rLakeHeatFluxAnalyzer/")
# test sw_alb
alb <- sw_alb(time = dat$dateTime,lat = 54)
# plot result
dygraph(xts(alb,dat$dateTime))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(dygraphs)
library(rLakeHeatFluxAnalyzer)
graphics.off()
rm(list = ls())
cat("\f")
rm(list=ls())
# read in example data
airT <- read.delim("../data/Esthwaite.airT")
rh <- read.delim("../data/Esthwaite.rh")
sw <- read.delim("../data/Esthwaite.sw")
wnd <- read.delim("../data/Esthwaite.wnd")
wtr <- read.delim("../data/Esthwaite.wtr")
# set latitude
lat <- 54
# combine data in a data.frame
dat <- data.frame(airT,RH=rh$RH,sw=sw$sw,wnd=wnd$wnd,W_temp=wtr$temp1)
# convert time to POSIXct format
dat$dateTime <- as.POSIXct(dat$dateTime,tz="UTC")
# test sw_alb
alb <- sw_alb(time = dat$dateTime,lat = 54)
# plot result
dygraph(xts(alb,dat$dateTime))
install.packages("dygraphs")
library(dygraphs)
# plot result
dygraph(xts(alb,dat$dateTime))
install.packages("xts")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(dygraphs)
library(xts)
library(rLakeHeatFluxAnalyzer)
graphics.off()
rm(list = ls())
cat("\f")
rm(list=ls())
# read in example data
airT <- read.delim("../data/Esthwaite.airT")
rh <- read.delim("../data/Esthwaite.rh")
sw <- read.delim("../data/Esthwaite.sw")
wnd <- read.delim("../data/Esthwaite.wnd")
wtr <- read.delim("../data/Esthwaite.wtr")
# set latitude
lat <- 54
# combine data in a data.frame
dat <- data.frame(airT,RH=rh$RH,sw=sw$sw,wnd=wnd$wnd,W_temp=wtr$temp1)
# convert time to POSIXct format
dat$dateTime <- as.POSIXct(dat$dateTime,tz="UTC")
# test sw_alb
alb <- sw_alb(time = dat$dateTime,lat = 54)
# plot result
dygraph(xts(alb,dat$dateTime))
plot(dat$dateTime,alb,'l')
abline(h=0.02,col=2)
# set hight of wind measurement
hu <- 10
# test neutral_transfer_coeff
test_neut <- neutral_transfer_coeff(Uz = wnd$wnd,hu = hu)
# plot results
plot(dat$dateTime,test_neut$C_HN,'l')
# test clearSkySW
test_csSW <- clearSkySW(time = dat$dateTime,lat = lat,pressure = 1024,temperature = dat$airT,RH = dat$RH)
# plot results
plot(dat$dateTime,test_csSW,'l')
# test  Mdl_LW
test <- Mdl_LW(dat$airT,dat$RH,cls,as.numeric(format(dat$dateTime,"%m")))
test
# test  Mdl_LW
test_Mdl_LW <- Mdl_LW(dat$airT,dat$RH,cls,as.numeric(format(dat$dateTime,"%m")))
# plot result
plot(test_Mdl_LW)
setwd("..")
roxygenise()
setwd("..")
detach("package:rLakeHeatFluxAnalyzer", unload=TRUE)
install("rLakeHeatFluxAnalyzer/")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(dygraphs)
library(xts)
library(rLakeHeatFluxAnalyzer)
graphics.off()
rm(list = ls())
cat("\f")
rm(list=ls())
# read in example data
airT <- read.delim("../data/Esthwaite.airT")
rh <- read.delim("../data/Esthwaite.rh")
sw <- read.delim("../data/Esthwaite.sw")
wnd <- read.delim("../data/Esthwaite.wnd")
wtr <- read.delim("../data/Esthwaite.wtr")
# set latitude
lat <- 54
# combine data in a data.frame
dat <- data.frame(airT,RH=rh$RH,sw=sw$sw,wnd=wnd$wnd,W_temp=wtr$temp1)
# convert time to POSIXct format
dat$dateTime <- as.POSIXct(dat$dateTime,tz="UTC")
# test sw_alb
alb <- sw_alb(time = dat$dateTime,lat = 54)
# plot result
dygraph(xts(alb,dat$dateTime))
plot(dat$dateTime,alb,'l')
abline(h=0.02,col=2)
# set hight of wind measurement
hu <- 10
# test neutral_transfer_coeff
test_neut <- neutral_transfer_coeff(Uz = wnd$wnd,hu = hu)
# plot results
plot(dat$dateTime,test_neut$C_HN,'l')
# test clearSkySW
test_csSW <- clearSkySW(time = dat$dateTime,lat = lat,pressure = 1024,temperature = dat$airT,RH = dat$RH)
# plot results
plot(dat$dateTime,test_csSW,'l')
cls <- 1 - sw/test_csSW
cls <- 1 - sw$sw/test_csSW
# test  Mdl_LW
test_Mdl_LW <- Mdl_LW(dat$airT,dat$RH,cls,as.numeric(format(dat$dateTime,"%m")))
# plot result
plot(test_Mdl_LW)
# plot result
dygraph(xts(test_Mdl_LW,dat))
# plot result
dygraph(xts(x = test_Mdl_LW,order.by = dat$dateTime))
